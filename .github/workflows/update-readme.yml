name: Update README with Recent Activity

on:
  push:
    branches: [ main ]
  schedule:
    - cron: '0 6 * * *'
  workflow_dispatch:

permissions:
  contents: write # 只能寫入內容
  actions: read # 只能讀取actions
  issues: write # 只能操作issues
  # 明確不給其他權限😤😤（霸氣
  

jobs:
  update-readme:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.REPO_TOKEN }}
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Get recent commits
      id: commits
      run: |
        echo "commits<<EOF" >> $GITHUB_OUTPUT
        git log --oneline -10 --pretty=format:"- %h: %s (%an, %ar)" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
    
    - name: Get repository stats
      id: stats
      run: |
        COMMIT_COUNT=$(git rev-list --count HEAD)
        LAST_COMMIT=$(git log -1 --pretty=format:"%ar")
        echo "commit_count=$COMMIT_COUNT" >> $GITHUB_OUTPUT
        echo "last_commit=$LAST_COMMIT" >> $GITHUB_OUTPUT
    
    - name: Update README
      run: |
        # Create updated activity section
        cat > activity_section.md << EOF
        <!-- ACTIVITY_START -->
        **Last Updated:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')
        
        **Repository Stats:**
        - Total Commits: ${{ steps.stats.outputs.commit_count }}
        - Last Commit: ${{ steps.stats.outputs.last_commit }}
        
        **Recent Commits:**
        ${{ steps.commits.outputs.commits }}
        <!-- ACTIVITY_END -->
        EOF
        
        # Replace the section in README
        awk '
        /<!-- ACTIVITY_START -->/ { p=1 }
        p==0 { print }
        /<!-- ACTIVITY_END -->/ { 
          while ((getline line < "activity_section.md") > 0) print line
          p=0
        }' README.md > README_new.md
        
        mv README_new.md README.md
        rm activity_section.md

    # 👇 在這裡添加 status badge 步驟
    - name: Update status badges
      run: |
        # Add workflow status badge if not already present
        if ! grep -q "Auto-Update.*badge\.svg" README.md; then
          # Create a temporary file with the badge at the top
          echo "![Auto-Update Status](https://github.com/${{ github.repository }}/workflows/Update%20README%20with%20Recent%20Activity/badge.svg)" > temp_readme.md
          echo "" >> temp_readme.md
          cat README.md >> temp_readme.md
          mv temp_readme.md README.md
        fi
        
        # Add last updated badge
        sed -i 's|!\[Auto-Update Status\].*|![Auto-Update Status](https://github.com/${{ github.repository }}/workflows/Update%20README%20with%20Recent%20Activity/badge.svg) ![Last Updated](https://img.shields.io/badge/Last%20Updated-$(date -u +%Y--%m--%d)-blue)|' README.md
    
    - name: Check for changes
      id: verify-changed-files
      run: |
        if [ -n "$(git status --porcelain)" ]; then
          echo "changed=true" >> $GITHUB_OUTPUT
        else
          echo "changed=false" >> $GITHUB_OUTPUT
        fi
    
    - name: Commit changes
      if: steps.verify-changed-files.outputs.changed == 'true'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add README.md
        git commit -m "🤖 Auto-update README with recent activity and badges"
        git push
    
    - name: Close linked issue on merge
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      run: |
        ISSUE_NUM=$(git log --oneline -1 | grep -o '#[0-9]\+' | head -1 | sed 's/#//')
        if [ ! -z "$ISSUE_NUM" ]; then
          gh issue close $ISSUE_NUM --comment "🎉 Automatically closed by merge to main"
        fi
      env:
        GH_TOKEN: ${{ secrets.REPO_TOKEN }}
